[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Evolución de los elementos",
    "section": "",
    "text": "Este es un ejemplo de aplicación de R que muestra un histograma de una muestra aleatoria de una distribución normal. La línea roja representa la media de la distribución normal y la línea azul representa la media de la muestra."
  },
  {
    "objectID": "index.html#demostración",
    "href": "index.html#demostración",
    "title": "Evolución de los elementos",
    "section": "",
    "text": "Este es un ejemplo de aplicación de R que muestra un histograma de una muestra aleatoria de una distribución normal. La línea roja representa la media de la distribución normal y la línea azul representa la media de la muestra."
  },
  {
    "objectID": "demo.html",
    "href": "demo.html",
    "title": "demo",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "demo.html#quarto",
    "href": "demo.html#quarto",
    "title": "demo",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "index.html#demostración-1",
    "href": "index.html#demostración-1",
    "title": "Evolución de los elementos",
    "section": "Demostración",
    "text": "Demostración\nEste es un ejemplo de aplicación de R que muestra un histograma de una muestra aleatoria de una distribución normal. La línea roja representa la media de la distribución normal y la línea azul representa la media de la muestra.\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\n# Cargar las librerías necesarias\n# Cargar las librerías necesarias\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(gapminder)\nlibrary(leaflet)\nlibrary(dplyr)\nlibrary(maps)\n\n# Cargar los datos de Gapminder\ndata(\"gapminder\")\n\n# Obtener las coordenadas de los países usando el paquete maps\nworld_coords &lt;- map_data(\"world\") %&gt;%\n  group_by(region) %&gt;%\n  summarise(long = mean(long), lat = mean(lat))\n\n# Renombrar la columna \"region\" a \"country\" para que coincida con gapminder\ncolnames(world_coords)[1] &lt;- \"country\"\n\n# Combinar los datos de gapminder con las coordenadas\ngapminder &lt;- gapminder %&gt;%\n  left_join(world_coords, by = \"country\")\n\n# Definir la interfaz de usuario (UI)\nui &lt;- fluidPage(\n  titlePanel(\"Visualización de Datos de Gapminder\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      # Control deslizante para seleccionar el año\n      sliderInput(\"year\", \"Selecciona el año:\", \n                  min = min(gapminder$year), \n                  max = max(gapminder$year), \n                  value = min(gapminder$year), \n                  step = 1, \n                  animate = TRUE),\n      \n      # Selector de país para el mapa\n      selectInput(\"country\", \"Selecciona un país:\", \n                  choices = unique(gapminder$country))\n    ),\n    \n    mainPanel(\n      # Gráfico de Expectativa de vida vs GDP\n      plotOutput(\"lifeExp_vs_gdp\"),\n      \n      # Mapa interactivo\n      leafletOutput(\"map\")\n    )\n  )\n)\n\n# Definir el servidor\nserver &lt;- function(input, output) {\n  \n  # Filtrar los datos según el año seleccionado\n  filtered_data &lt;- reactive({\n    gapminder %&gt;% filter(year == input$year)\n  })\n  \n  # Gráfico de Expectativa de vida vs GDP\n  output$lifeExp_vs_gdp &lt;- renderPlot({\n    ggplot(filtered_data(), aes(x = gdpPercap, y = lifeExp, color = continent)) +\n      geom_point(alpha = 0.7) +\n      scale_x_log10() +\n      labs(title = paste(\"Expectativa de vida vs GDP en el año\", input$year),\n           x = \"GDP per cápita (log scale)\",\n           y = \"Expectativa de vida\") +\n      theme_minimal()\n  })\n  \n  # Mapa interactivo\n  output$map &lt;- renderLeaflet({\n    # Filtrar los datos del país seleccionado\n    country_data &lt;- gapminder %&gt;% filter(country == input$country)\n    \n    # Verificar si hay coordenadas disponibles para el país seleccionado\n    if (is.na(country_data$long) || is.na(country_data$lat)) {\n      # Si no hay coordenadas, mostrar un mensaje en el mapa\n      leaflet() %&gt;%\n        addTiles() %&gt;%\n        addMarkers(lng = 0, lat = 0, popup = \"Coordenadas no disponibles para este país.\")\n    } else {\n      # Si hay coordenadas, mostrar el país en el mapa\n      leaflet(country_data) %&gt;%\n        addTiles() %&gt;%\n        addMarkers(lng = ~long, lat = ~lat, \n                   popup = ~paste(\"País: \", country, \"&lt;br&gt;\",\n                                  \"Expectativa de vida: \", lifeExp, \"&lt;br&gt;\",\n                                  \"GDP per cápita: \", gdpPercap))\n    }\n  })\n}\n\n# Ejecutar la aplicación Shiny\nshinyApp(ui = ui, server = server)\n\nSimilarity between the chemical elementsOptimize the sequence of element\n\n\n\nChemical elements show resemblances to others in the compounds they form. Two elements are alike if they both form compounds with similar compositions.\n\n\nThis similarity matrix encodes how similar each element is to any other one.\n\nHover over any pixel to visualize the similarity between a pair of elements\n\n\n\nSimilarity information can be encoded in a sequence of elements, so that similar elements are closer together.\n\n\nUsing genetic algorithms, we find such optimal sequences.\n\nPress the button to optimize the sequence.\n\nThis will bring high values of the matrix closer to the diagonal."
  }
]