[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ejemplo de App para Visualización de Datos Interactiva",
    "section": "",
    "text": "Este es un ejemplo de una aplicación Shiny que visualiza datos de Gapminder, incluyendo un gráfico de expectativa de vida vs GDP y un mapa interactivo con información detallada de cada país.\nPuedes seleccionar un continente en el menú desplegable para filtrar los datos y ver la visualización correspondiente con el botón Play. Además, puedes hacer clic en un país en el gráfico para ver su ubicación en el mapa.\nNOTA: Espera ~1 minuto para que cargue la aplicación interactiva.\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\n# Cargar las librerías necesarias\n# Cargar las librerías necesarias\nlibrary(shiny)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(gapminder)\nlibrary(leaflet)\nlibrary(RColorBrewer)\nlibrary(dplyr)\nlibrary(maps)\n\n# Cargar los datos de Gapminder\ndata(\"gapminder\")\n\n# Obtener las coordenadas de los países usando el paquete maps\nworld_coords &lt;- map_data(\"world\") %&gt;%\n  group_by(region) %&gt;%\n  summarise(long = mean(long), lat = mean(lat))\n\n# Renombrar la columna \"region\" a \"country\" para que coincida con gapminder\ncolnames(world_coords)[1] &lt;- \"country\"\n\n# Combinar los datos de gapminder con las coordenadas\ngapminder_df &lt;- gapminder %&gt;%\n  left_join(world_coords, by = \"country\")\n\n# Definir la interfaz de usuario (UI)\nui &lt;- fluidPage(\n  titlePanel(\"Visualización de Datos Interactiva\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      # Selector de continente\n      selectInput(\"continent\", \"Selecciona el continente:\", \n                  choices = unique(gapminder_df$continent)),\n      \n      # Selector de país para el mapa (comentado)\n      # selectInput(\"country\", \"Selecciona un país para el mapa\", \n      #             choices = unique(gapminder_df$country))\n    ),\n    \n    mainPanel(\n      # Gráfico de Expectativa de vida vs GDP\n      plotlyOutput(\"lifeExp_vs_gdp\"),\n      \n      # Mapa interactivo\n      leafletOutput(\"map\")\n    )\n  )\n)\n\n# Definir el servidor\nserver &lt;- function(input, output) {\n  \n  # Filtrar los datos según el continente seleccionado\n  filtered_data &lt;- reactive({\n    gapminder_df %&gt;% filter(continent == input$continent)\n  })\n  \n  # Gráfico de Expectativa de vida vs GDP\n  output$lifeExp_vs_gdp &lt;- renderPlotly({\n    ggp_for_plotly &lt;- ggplot(filtered_data(), aes(x = gdpPercap, y = lifeExp, color = continent)) +\n      geom_point(alpha = 0.5, aes(\n        size = pop,\n        frame = year,\n        ids = country\n      )) +\n      scale_x_log10(labels = scales::dollar_format()) +\n      geom_smooth(method = NULL, se = TRUE) +\n      labs(title = \"Expectativa de vida vs GDP per cápita\",\n           x = \"GDP per cápita (escala logarítmica)\",\n           y = \"Expectativa de vida\") +\n      theme_minimal()\n    \n    ggplotly(ggp_for_plotly)\n  })\n  \n  # Mapa interactivo\n  output$map &lt;- renderLeaflet({\n    # Filtrar los datos del continente seleccionado\n    country_data &lt;- gapminder_df %&gt;% filter(continent == input$continent)\n    \n    # Verificar si hay coordenadas disponibles\n    if (nrow(country_data) == 0 || all(is.na(country_data$long)) || all(is.na(country_data$lat))) {\n      # Si no hay coordenadas, mostrar un mensaje en el mapa\n      leaflet() %&gt;%\n        addTiles() %&gt;%\n        addMarkers(lng = 0, lat = 0, popup = \"Coordenadas no disponibles para este continente.\")\n    } else {\n      # Si hay coordenadas, mostrar el continente en el mapa\n      leaflet(country_data) %&gt;%\n        addTiles() %&gt;%\n        addMarkers(lng = ~long, lat = ~lat, \n                   popup = ~paste(\"País: \", country, \"&lt;br&gt;\",\n                                  \"Continente: \", continent, \"&lt;br&gt;\",\n                                  \"Expectativa de vida: \", lifeExp, \"&lt;br&gt;\",\n                                  \"GDP per cápita: \", gdpPercap))\n    }\n  })\n}\n\n# Ejecutar la aplicación Shiny\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "index.html#demostración",
    "href": "index.html#demostración",
    "title": "Ejemplo de App para Visualización de Datos Interactiva",
    "section": "",
    "text": "Este es un ejemplo de una aplicación Shiny que visualiza datos de Gapminder, incluyendo un gráfico de expectativa de vida vs GDP y un mapa interactivo con información detallada de cada país.\nPuedes seleccionar un continente en el menú desplegable para filtrar los datos y ver la visualización correspondiente con el botón Play. Además, puedes hacer clic en un país en el gráfico para ver su ubicación en el mapa.\nNOTA: Espera ~1 minuto para que cargue la aplicación interactiva.\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\n# Cargar las librerías necesarias\n# Cargar las librerías necesarias\nlibrary(shiny)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(gapminder)\nlibrary(leaflet)\nlibrary(RColorBrewer)\nlibrary(dplyr)\nlibrary(maps)\n\n# Cargar los datos de Gapminder\ndata(\"gapminder\")\n\n# Obtener las coordenadas de los países usando el paquete maps\nworld_coords &lt;- map_data(\"world\") %&gt;%\n  group_by(region) %&gt;%\n  summarise(long = mean(long), lat = mean(lat))\n\n# Renombrar la columna \"region\" a \"country\" para que coincida con gapminder\ncolnames(world_coords)[1] &lt;- \"country\"\n\n# Combinar los datos de gapminder con las coordenadas\ngapminder_df &lt;- gapminder %&gt;%\n  left_join(world_coords, by = \"country\")\n\n# Definir la interfaz de usuario (UI)\nui &lt;- fluidPage(\n  titlePanel(\"Visualización de Datos Interactiva\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      # Selector de continente\n      selectInput(\"continent\", \"Selecciona el continente:\", \n                  choices = unique(gapminder_df$continent)),\n      \n      # Selector de país para el mapa (comentado)\n      # selectInput(\"country\", \"Selecciona un país para el mapa\", \n      #             choices = unique(gapminder_df$country))\n    ),\n    \n    mainPanel(\n      # Gráfico de Expectativa de vida vs GDP\n      plotlyOutput(\"lifeExp_vs_gdp\"),\n      \n      # Mapa interactivo\n      leafletOutput(\"map\")\n    )\n  )\n)\n\n# Definir el servidor\nserver &lt;- function(input, output) {\n  \n  # Filtrar los datos según el continente seleccionado\n  filtered_data &lt;- reactive({\n    gapminder_df %&gt;% filter(continent == input$continent)\n  })\n  \n  # Gráfico de Expectativa de vida vs GDP\n  output$lifeExp_vs_gdp &lt;- renderPlotly({\n    ggp_for_plotly &lt;- ggplot(filtered_data(), aes(x = gdpPercap, y = lifeExp, color = continent)) +\n      geom_point(alpha = 0.5, aes(\n        size = pop,\n        frame = year,\n        ids = country\n      )) +\n      scale_x_log10(labels = scales::dollar_format()) +\n      geom_smooth(method = NULL, se = TRUE) +\n      labs(title = \"Expectativa de vida vs GDP per cápita\",\n           x = \"GDP per cápita (escala logarítmica)\",\n           y = \"Expectativa de vida\") +\n      theme_minimal()\n    \n    ggplotly(ggp_for_plotly)\n  })\n  \n  # Mapa interactivo\n  output$map &lt;- renderLeaflet({\n    # Filtrar los datos del continente seleccionado\n    country_data &lt;- gapminder_df %&gt;% filter(continent == input$continent)\n    \n    # Verificar si hay coordenadas disponibles\n    if (nrow(country_data) == 0 || all(is.na(country_data$long)) || all(is.na(country_data$lat))) {\n      # Si no hay coordenadas, mostrar un mensaje en el mapa\n      leaflet() %&gt;%\n        addTiles() %&gt;%\n        addMarkers(lng = 0, lat = 0, popup = \"Coordenadas no disponibles para este continente.\")\n    } else {\n      # Si hay coordenadas, mostrar el continente en el mapa\n      leaflet(country_data) %&gt;%\n        addTiles() %&gt;%\n        addMarkers(lng = ~long, lat = ~lat, \n                   popup = ~paste(\"País: \", country, \"&lt;br&gt;\",\n                                  \"Continente: \", continent, \"&lt;br&gt;\",\n                                  \"Expectativa de vida: \", lifeExp, \"&lt;br&gt;\",\n                                  \"GDP per cápita: \", gdpPercap))\n    }\n  })\n}\n\n# Ejecutar la aplicación Shiny\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "demo.html",
    "href": "demo.html",
    "title": "demo",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "demo.html#quarto",
    "href": "demo.html#quarto",
    "title": "demo",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)"
  }
]