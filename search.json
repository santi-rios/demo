[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Evolución de los elementos",
    "section": "",
    "text": "Este es un ejemplo de aplicación de R que muestra un histograma de una muestra aleatoria de una distribución normal. La línea roja representa la media de la distribución normal y la línea azul representa la media de la muestra.\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\n## file: ./data/simMat.RData\nlibrary(shiny)\nlibrary(shinylive)\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(bslib)\nlibrary(bsicons)\n# install.packages(\"bsicons\")\n\nmin_yr &lt;- 1800\nmax_yr &lt;- 2021\n\ngetPeriodicTable &lt;- function(short = TRUE) {\n  if (short) {\n    TP &lt;- list(\n      shape = c(9, 18),\n      xy = list(\n        'H' = c(0, 0),\n        'He' = c(0, 17),\n        'Li' = c(1, 0),\n        'Be' = c(1, 1),\n        'B' = c(1, 12),\n        'C' = c(1, 13),\n        'N' = c(1, 14),\n        'O' = c(1, 15),\n        'F' = c(1, 16),\n        'Lr' = c(8, 16)\n      ),\n      names = list(\n        'H' = 'Hydrogen',\n        'He' = 'Helium',\n        'Li' = 'Lithium',\n        'Be' = 'Beryllium',\n        'B' = 'Boron',\n        'C' = 'Carbon',\n        'N' = 'Nitrogen',\n        'O' = 'Oxygen',\n        'F' = 'Fluorine',\n        'Lr' = 'Lawrencium'\n      )\n    )\n  } else {\n    TP &lt;- list(\n      shape = c(7, 32),\n      xy = list(\n        'H' = c(0, 0),\n        'He' = c(0, 31),\n        'Li' = c(1, 0),\n        'Be' = c(1, 1),\n        'B' = c(1, 26),\n        'C' = c(1, 27),\n        'N' = c(1, 28),\n        'O' = c(1, 29),\n        'F' = c(1, 30),\n        'Lr' = c(6, 16)\n      ),\n      names = list(\n        'H' = 'Hydrogen',\n        'He' = 'Helium',\n        'Li' = 'Lithium',\n        'Be' = 'Beryllium',\n        'B' = 'Boron',\n        'C' = 'Carbon',\n        'N' = 'Nitrogen',\n        'O' = 'Oxygen',\n        'F' = 'Fluorine',\n        'Lr' = 'Lawrencium'\n      )\n    )\n  }\n  \n  return(TP)\n}\n\n\nprocessSimMat &lt;- function(simMats, elemList, min_yr = 1800, max_yr = 2021) {\n  # Symmetrize similarity matrices\n  P &lt;- simMats # Assuming simMats is already symmetric or needs symmetrization\n\n#   symmetrize &lt;- function(S) {\n#     S &lt;- replace_na(S, 0)\n#     n &lt;- nrow(S)\n#     Sum0 &lt;- rowSums(S[ , 1, drop = FALSE])\n#     Sum1 &lt;- colSums(S[ , 1, drop = FALSE])\n#     P &lt;- sqrt((S^2) / ((Sum0 %&gt;% matrix(nrow=n, ncol=n, byrow=TRUE)) * \n#                          (Sum1 %&gt;% matrix(nrow=n, ncol=n, byrow=FALSE)) + 1e-5))\n#     diag(P) &lt;- 0\n#     P &lt;- replace_na(P, 0)\n#     return(P)\n#   }\n\n#   P_sym &lt;- apply(P, 1:3, symmetrize)\n  \n#   return(P_sym)\n    return(P)\n}\n\n# P_sym &lt;- processSimMat(simMats, elemList, min_yr = 1800, max_yr = 2021)\n\n# Visualization Function\nplotSimMat &lt;- function(P_sym, year, perm, elemList) {\n    # Reorder permutation\n    perm_order &lt;- perm\n    label &lt;- elemList[perm_order]\n    \n    # Extract similarity matrix for the year\n    S &lt;- P_sym[year - 1800 + 1, perm_order, perm_order]\n    \n    # Log scale\n    log_S &lt;- log10(S + 1e-10)\n    \n    # Create heatmap\n    fig &lt;- plot_ly(\n        x = label,\n        y = label,\n        z = log_S,\n        type = \"heatmap\",\n        coloraxis = 'coloraxis',\n    colorbar = list(title = \"Similarity (log scale)\")\n  ) %&gt;%\n    layout(\n      xaxis = list(side = \"top\", tickangle = -90, constrain = \"domain\"),\n      yaxis = list(autorange = \"reversed\", scaleanchor = \"x\" ),\n          margin = list(l = 50, r = 50, b = 100, t = 50),\n         title = paste(\"Matriz de Similitud para \", year),\n          coloraxis=list(colorscale='Jet'),\n            hovertemplate = paste(\n              \"&lt;b&gt;%{x}&lt;/b&gt; and &lt;b&gt;%{y}&lt;/b&gt;&lt;br&gt;\",\n              \"Similarity: %{z:.2f}&lt;extra&gt;&lt;/extra&gt;\"\n            )\n          )\n      \n          return(fig)\n        }\n\ncreatePeriodicTable &lt;- function(TP) {\n  shape &lt;- TP$shape\n  xy &lt;- TP$xy\n  names_list &lt;- TP$names\n  \n  symbol_matrix &lt;- matrix(\"\", nrow = shape[1], ncol = shape[2])\n  \n  for (elem in names(xy)) {\n    pos &lt;- xy[[elem]]\n    if (!is.na(pos[1])) {\n      symbol_matrix[pos[1] + 1, pos[2] + 1] &lt;- elem\n    }\n  }\n\n\n  element_matrix &lt;- matrix(names_list[symbol_matrix], nrow = shape[1], ncol = shape[2], byrow = FALSE)\n  \n  # Create heatmap\n  fig &lt;- plot_ly(\n    z = ifelse(element_matrix == \"\", NA, 1),\n    type = \"heatmap\",\n    showscale = FALSE,\n    # colors = c(\"black\", \"blue\"),\n    colors = viridis::scale_color_viridis(),\n    x = 1:shape[2],\n    y = 1:shape[1],\n    hoverinfo = \"text\",\n    text = apply(element_matrix, 1:2, function(x) ifelse(x == \"\", \"\", paste0(\"&lt;b&gt;\", x, \"&lt;/b&gt;\")))\n  ) %&gt;%\n    layout(\n      xaxis = list(showticklabels = FALSE, zeroline = FALSE),\n      yaxis = list(showticklabels = FALSE, zeroline = FALSE, scaleanchor = \"x\", autorange = \"reversed\"),\n      margin = list(l = 20, r = 20, b = 20, t = 20)\n    )\n  \n  # Add annotations\n  for (i in 1:shape[1]) {\n    for (j in 1:shape[2]) {\n      elem &lt;- element_matrix[i, j]\n      if (elem != \"\") {\n        fig &lt;- fig %&gt;%\n          add_annotations(\n            x = j,\n            y = i,\n            text = paste0(\"&lt;b&gt;\", elem, \"&lt;/b&gt;\"),\n            showarrow = FALSE,\n            font = list(color = \"black\")\n          )\n      }\n    }\n  }\n  \n  return(fig)\n}\n\n# Usage\nTP &lt;- getPeriodicTable(short = TRUE)\n\nperiodic_table_fig &lt;- createPeriodicTable(TP)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  plotlyOutput('simmat_plot'), \n  uiOutput('year_slider')\n)\n\nserver &lt;- function(input, output, session) {\n  # load(\"data/simMat.RData\")\n  load(\"data/P_sym.RData\")\n  # simMats &lt;-  np$load(\"data/simMat.npy\")\n  # P_sym &lt;- processSimMat(simMats, elemList, min_yr = 1800, max_yr = 2021)\n\n  output$year_slider &lt;- renderUI({\n    sliderInput(\"year\", \"Seleccionar fecha\", min = 1800, max = 2021, value = 2021, step = 1)\n})\n  output$simmat_plot &lt;- renderPlotly({\n    req(input$year)\n\n    plot &lt;- plotSimMat(P_sym, input$year, seq_along(elemList), elemList)\n\n    ggplotly(plot)\n    })\n  output$valuetext &lt;- renderText({\n    paste(\"Año seleccionado \", input$year)\n  })\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\nSimilarity between the chemical elementsOptimize the sequence of element\n\n\n\nChemical elements show resemblances to others in the compounds they form. Two elements are alike if they both form compounds with similar compositions.\n\n\nThis similarity matrix encodes how similar each element is to any other one.\n\nHover over any pixel to visualize the similarity between a pair of elements\n\n\n\nSimilarity information can be encoded in a sequence of elements, so that similar elements are closer together.\n\n\nUsing genetic algorithms, we find such optimal sequences.\n\nPress the button to optimize the sequence.\n\nThis will bring high values of the matrix closer to the diagonal."
  },
  {
    "objectID": "index.html#demostración",
    "href": "index.html#demostración",
    "title": "Evolución de los elementos",
    "section": "",
    "text": "Este es un ejemplo de aplicación de R que muestra un histograma de una muestra aleatoria de una distribución normal. La línea roja representa la media de la distribución normal y la línea azul representa la media de la muestra.\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\n## file: ./data/simMat.RData\nlibrary(shiny)\nlibrary(shinylive)\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(bslib)\nlibrary(bsicons)\n# install.packages(\"bsicons\")\n\nmin_yr &lt;- 1800\nmax_yr &lt;- 2021\n\ngetPeriodicTable &lt;- function(short = TRUE) {\n  if (short) {\n    TP &lt;- list(\n      shape = c(9, 18),\n      xy = list(\n        'H' = c(0, 0),\n        'He' = c(0, 17),\n        'Li' = c(1, 0),\n        'Be' = c(1, 1),\n        'B' = c(1, 12),\n        'C' = c(1, 13),\n        'N' = c(1, 14),\n        'O' = c(1, 15),\n        'F' = c(1, 16),\n        'Lr' = c(8, 16)\n      ),\n      names = list(\n        'H' = 'Hydrogen',\n        'He' = 'Helium',\n        'Li' = 'Lithium',\n        'Be' = 'Beryllium',\n        'B' = 'Boron',\n        'C' = 'Carbon',\n        'N' = 'Nitrogen',\n        'O' = 'Oxygen',\n        'F' = 'Fluorine',\n        'Lr' = 'Lawrencium'\n      )\n    )\n  } else {\n    TP &lt;- list(\n      shape = c(7, 32),\n      xy = list(\n        'H' = c(0, 0),\n        'He' = c(0, 31),\n        'Li' = c(1, 0),\n        'Be' = c(1, 1),\n        'B' = c(1, 26),\n        'C' = c(1, 27),\n        'N' = c(1, 28),\n        'O' = c(1, 29),\n        'F' = c(1, 30),\n        'Lr' = c(6, 16)\n      ),\n      names = list(\n        'H' = 'Hydrogen',\n        'He' = 'Helium',\n        'Li' = 'Lithium',\n        'Be' = 'Beryllium',\n        'B' = 'Boron',\n        'C' = 'Carbon',\n        'N' = 'Nitrogen',\n        'O' = 'Oxygen',\n        'F' = 'Fluorine',\n        'Lr' = 'Lawrencium'\n      )\n    )\n  }\n  \n  return(TP)\n}\n\n\nprocessSimMat &lt;- function(simMats, elemList, min_yr = 1800, max_yr = 2021) {\n  # Symmetrize similarity matrices\n  P &lt;- simMats # Assuming simMats is already symmetric or needs symmetrization\n\n#   symmetrize &lt;- function(S) {\n#     S &lt;- replace_na(S, 0)\n#     n &lt;- nrow(S)\n#     Sum0 &lt;- rowSums(S[ , 1, drop = FALSE])\n#     Sum1 &lt;- colSums(S[ , 1, drop = FALSE])\n#     P &lt;- sqrt((S^2) / ((Sum0 %&gt;% matrix(nrow=n, ncol=n, byrow=TRUE)) * \n#                          (Sum1 %&gt;% matrix(nrow=n, ncol=n, byrow=FALSE)) + 1e-5))\n#     diag(P) &lt;- 0\n#     P &lt;- replace_na(P, 0)\n#     return(P)\n#   }\n\n#   P_sym &lt;- apply(P, 1:3, symmetrize)\n  \n#   return(P_sym)\n    return(P)\n}\n\n# P_sym &lt;- processSimMat(simMats, elemList, min_yr = 1800, max_yr = 2021)\n\n# Visualization Function\nplotSimMat &lt;- function(P_sym, year, perm, elemList) {\n    # Reorder permutation\n    perm_order &lt;- perm\n    label &lt;- elemList[perm_order]\n    \n    # Extract similarity matrix for the year\n    S &lt;- P_sym[year - 1800 + 1, perm_order, perm_order]\n    \n    # Log scale\n    log_S &lt;- log10(S + 1e-10)\n    \n    # Create heatmap\n    fig &lt;- plot_ly(\n        x = label,\n        y = label,\n        z = log_S,\n        type = \"heatmap\",\n        coloraxis = 'coloraxis',\n    colorbar = list(title = \"Similarity (log scale)\")\n  ) %&gt;%\n    layout(\n      xaxis = list(side = \"top\", tickangle = -90, constrain = \"domain\"),\n      yaxis = list(autorange = \"reversed\", scaleanchor = \"x\" ),\n          margin = list(l = 50, r = 50, b = 100, t = 50),\n         title = paste(\"Matriz de Similitud para \", year),\n          coloraxis=list(colorscale='Jet'),\n            hovertemplate = paste(\n              \"&lt;b&gt;%{x}&lt;/b&gt; and &lt;b&gt;%{y}&lt;/b&gt;&lt;br&gt;\",\n              \"Similarity: %{z:.2f}&lt;extra&gt;&lt;/extra&gt;\"\n            )\n          )\n      \n          return(fig)\n        }\n\ncreatePeriodicTable &lt;- function(TP) {\n  shape &lt;- TP$shape\n  xy &lt;- TP$xy\n  names_list &lt;- TP$names\n  \n  symbol_matrix &lt;- matrix(\"\", nrow = shape[1], ncol = shape[2])\n  \n  for (elem in names(xy)) {\n    pos &lt;- xy[[elem]]\n    if (!is.na(pos[1])) {\n      symbol_matrix[pos[1] + 1, pos[2] + 1] &lt;- elem\n    }\n  }\n\n\n  element_matrix &lt;- matrix(names_list[symbol_matrix], nrow = shape[1], ncol = shape[2], byrow = FALSE)\n  \n  # Create heatmap\n  fig &lt;- plot_ly(\n    z = ifelse(element_matrix == \"\", NA, 1),\n    type = \"heatmap\",\n    showscale = FALSE,\n    # colors = c(\"black\", \"blue\"),\n    colors = viridis::scale_color_viridis(),\n    x = 1:shape[2],\n    y = 1:shape[1],\n    hoverinfo = \"text\",\n    text = apply(element_matrix, 1:2, function(x) ifelse(x == \"\", \"\", paste0(\"&lt;b&gt;\", x, \"&lt;/b&gt;\")))\n  ) %&gt;%\n    layout(\n      xaxis = list(showticklabels = FALSE, zeroline = FALSE),\n      yaxis = list(showticklabels = FALSE, zeroline = FALSE, scaleanchor = \"x\", autorange = \"reversed\"),\n      margin = list(l = 20, r = 20, b = 20, t = 20)\n    )\n  \n  # Add annotations\n  for (i in 1:shape[1]) {\n    for (j in 1:shape[2]) {\n      elem &lt;- element_matrix[i, j]\n      if (elem != \"\") {\n        fig &lt;- fig %&gt;%\n          add_annotations(\n            x = j,\n            y = i,\n            text = paste0(\"&lt;b&gt;\", elem, \"&lt;/b&gt;\"),\n            showarrow = FALSE,\n            font = list(color = \"black\")\n          )\n      }\n    }\n  }\n  \n  return(fig)\n}\n\n# Usage\nTP &lt;- getPeriodicTable(short = TRUE)\n\nperiodic_table_fig &lt;- createPeriodicTable(TP)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  plotlyOutput('simmat_plot'), \n  uiOutput('year_slider')\n)\n\nserver &lt;- function(input, output, session) {\n  # load(\"data/simMat.RData\")\n  load(\"data/P_sym.RData\")\n  # simMats &lt;-  np$load(\"data/simMat.npy\")\n  # P_sym &lt;- processSimMat(simMats, elemList, min_yr = 1800, max_yr = 2021)\n\n  output$year_slider &lt;- renderUI({\n    sliderInput(\"year\", \"Seleccionar fecha\", min = 1800, max = 2021, value = 2021, step = 1)\n})\n  output$simmat_plot &lt;- renderPlotly({\n    req(input$year)\n\n    plot &lt;- plotSimMat(P_sym, input$year, seq_along(elemList), elemList)\n\n    ggplotly(plot)\n    })\n  output$valuetext &lt;- renderText({\n    paste(\"Año seleccionado \", input$year)\n  })\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\nSimilarity between the chemical elementsOptimize the sequence of element\n\n\n\nChemical elements show resemblances to others in the compounds they form. Two elements are alike if they both form compounds with similar compositions.\n\n\nThis similarity matrix encodes how similar each element is to any other one.\n\nHover over any pixel to visualize the similarity between a pair of elements\n\n\n\nSimilarity information can be encoded in a sequence of elements, so that similar elements are closer together.\n\n\nUsing genetic algorithms, we find such optimal sequences.\n\nPress the button to optimize the sequence.\n\nThis will bring high values of the matrix closer to the diagonal."
  },
  {
    "objectID": "demo.html",
    "href": "demo.html",
    "title": "demo",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)"
  },
  {
    "objectID": "demo.html#quarto",
    "href": "demo.html#quarto",
    "title": "demo",
    "section": "",
    "text": "#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)"
  }
]